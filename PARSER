using System.Collections.Generic;
using NUnit.Framework;
using NUnit.Framework.Legacy;

namespace TableParser;

[TestFixture]
public class FieldParserTaskTests
{
	public static void Test(string input, string[] expectedResult)
	{
		var actualResult = FieldsParserTask.ParseLine(input);
		ClassicAssert.AreEqual(expectedResult.Length, actualResult.Count);
		for (int i = 0; i < expectedResult.Length; i++)
		{
			ClassicAssert.AreEqual(expectedResult[i], actualResult[i].Value);
		}
	}

    [TestCase("text", new[] { "text" })]
    [TestCase("hello world", new[] { "hello", "world" })]
    [TestCase("", new string[0])]
    [TestCase("\"a b\"", new[] { "a b" })]
    [TestCase("a 'b c'", new[] { "a", "b c" })]
    [TestCase("a \"b c\"", new[] { "a", "b c" })]
    [TestCase("'a' 'b'", new[] { "a", "b" })]
    [TestCase("\"a\" \"b\"", new[] { "a", "b" })]
    [TestCase("'a", new[] { "a" })]
    [TestCase("\"a", new[] { "a" })]
    [TestCase("'a\\''", new[] { "a'" })]
    [TestCase("a'b'c", new[] { "a", "b", "c" })]
    [TestCase("a\"b\"c", new[] { "a", "b", "c" })]
    [TestCase("'a''b'", new[] { "a", "b" })]
    [TestCase("\"a\"\"b\"", new[] { "a", "b" })]
    [TestCase("'a\"b\"'", new[] { "a\"b\"" })]
    [TestCase("\"a'b'\"", new[] { "a'b'" })]
    [TestCase("a", new[] { "a" })]
    [TestCase("abc", new[] { "abc" })]
    [TestCase("a b", new[] { "a", "b" })]
    [TestCase("  a  b  ", new[] { "a", "b" })]
    [TestCase("'a'", new[] { "a" })]
    [TestCase("\"a\"", new[] { "a" })]
    [TestCase("''", new[] { "" })]
    [TestCase("\"\"", new[] { "" })]
    [TestCase("' '", new[] { " " })]
    [TestCase("\" \"", new[] { " " })]
    [TestCase("a'b'", new[] { "a", "b" })]
    [TestCase("a\"b\"", new[] { "a", "b" })]
    [TestCase("'a b'", new[] { "a b" })]
    [TestCase("'a\\\\b'", new[] { "a\\b" })]
    [TestCase("\"a\\\\b\"", new[] { "a\\b" })]
    [TestCase("\"a\\\"\"", new[] { "a\"" })]
    [TestCase("'\\\\'", new[] { "\\" })]
    [TestCase("\"\\\\\"", new[] { "\\" })]
    [TestCase("'a ", new[] { "a " })]
    [TestCase("\"a ", new[] { "a " })]
    [TestCase("'a b ", new[] { "a b " })]
    public static void RunTests(string input, string[] expectedOutput)
    {
        Test(input, expectedOutput);
    }
}

public class FieldsParserTask
{
    public static List<Token> ParseLine(string line)
    {
        var tokens = new List<Token>();
        var index = 0;

        while (index < line.Length)
        {
            var nextToken = ReadNextToken(line, index);
            if (nextToken != null)
            {
                tokens.Add(nextToken);
                index = nextToken.GetIndexNextToToken();
            }
            else
            {
                index++;
            }
        }

        return tokens;
    }

    private static Token ReadNextToken(string line, int startIndex)
    {
		if (char.IsWhiteSpace(line[startIndex]))
		{
            return null;
		}
        if (line[startIndex] == '\'' || line[startIndex] == '\"')
		{
				return ReadQuotedField(line, startIndex);
		}
		else
		{
			return ReadField(line, startIndex);
		}
    }

    private static Token ReadField(string line, int startIndex)
    {
        var length = 0;
        for (int i = startIndex; i < line.Length; i++)
        {
			if (char.IsWhiteSpace(line[i]) || line[i] == '\'' || line[i] == '\"')
			{
				break;
			}
            length++;
        }

        var value = line.Substring(startIndex, length);
        return new Token(value, startIndex, length);
    }

    public static Token ReadQuotedField(string line, int startIndex)
	{
		return QuotedFieldTask.ReadQuotedField(line, startIndex);
	}
}
